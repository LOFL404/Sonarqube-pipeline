pipeline {
    agent any
    environment {
        GITHUB_CREDENTIAL = credentials('github-flask-cicd')
        DOCKER_CREDENTIAL = credentials('docker-hub')
        TAG_VERSION = 'v1.0.0'
        PROJECT_NAME = 'static-web'
        REPO_NAME = 'cicd-pipeline'
    }
    triggers {
        githubPush()
    }
    stages {
        // stage('동작 테스트를 위한 소스 복사 및 테스트') {
        //     // agent {
        //     //     docker {
        //     //         image 'nginx:latest'
        //     //         args '-u root --name nginx'
        //     //         reuseNode true
        //     //     }
        //     // }
        //     steps {
        //         sh 'cp ./src/* /usr/share/nginx/html/'
        //         echo '테스트 과정 생략...'
        //         // script {
        //         //     sh 'curl -s -I http://localhost > check'
        //         //     sh 'grep -E "HTTP/.+2[0-9]{2} OK" check'
        //         // }
        //     }
        // }
        stage('소나 큐브로 품질 테스트 진행') {
            steps {
                script {
                    withSonarQubeEnv('Sonar-Server') {
                        sh """
                            docker run --rm \
                              -e SONAR_HOST_URL=$SONAR_HOST_URL \
                              -e SONAR_LOGIN=$SONAR_AUTH_TOKEN \
                              -e SONAR_SCANNER_OPTS='-Dsonar.projectKey=Website-scan' \
                              -v \$(pwd):/usr/src \
                              sonarsource/sonar-scanner-cli
                        """
                    }
                }
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('소스 코드 압축') {
            steps {
                sh "tar -czvf ${PROJECT_NAME}.tar.gz src/"
            }
        }
        // stage('압축한 소스 코드 깃허브에 배포') {
        //     steps {
        //         script {
        //             def response = sh(script: """
        //                 curl -sSL \
        //                     -X POST \
        //                     -H "Accept: application/vnd.github+json" \
        //                     -H "Authorization: Bearer ${GITHUB_CREDENTIAL_PSW}" \
        //                     -H "X-GitHub-Api-Version: 2022-11-28" \
        //                     https://api.github.com/repos/LOFL404/${REPO_NAME}/releases \
        //                     -d '{
        //                             "tag_name":"${TAG_VERSION}",
        //                             "target_commitish":"main",
        //                             "name":"${TAG_VERSION}",
        //                             "body":"Description of the release",
        //                             "draft":false,
        //                             "prerelease":false,
        //                             "generate_release_notes":false
        //                         }'
        //             """, returnStdout: true) // 스크립트 실행 후 출력 결과를 response 변수에 저장!
                    
        //             def json = readJSON text: "$response"
        //             def id = json.id
                    
        //             sh """
        //                 curl -sSL \
        //                     -X POST \
        //                     -H "Accept: application/vnd.github+json" \
        //                     -H "Authorization: Bearer ${GITHUB_CREDENTIAL_PSW}" \
        //                     -H "X-GitHub-Api-Version: 2022-11-28" \
        //                     -H "Content-Type: application/octet-stream" \
        //                     "https://uploads.github.com/repos/LOFL404/${REPO_NAME}/releases/${id}/assets?name=${PROJECT_NAME}.tar.gz" \
        //                     --data-binary "@${PROJECT_NAME}.tar.gz"
        //             """
        //         }
        //     }
        // }
        stage('압축한 소스 코드 도커 이미지로 빌드 및 푸쉬') {
            steps {
                sh "docker login -u ${DOCKER_CREDENTIAL_USR} -p ${DOCKER_CREDENTIAL_PSW}"
                sh "docker build -t ${DOCKER_CREDENTIAL_USR}/${PROJECT_NAME}:latest -f .docker/Dockerfile ."
                sh "docker tag ${DOCKER_CREDENTIAL_USR}/${PROJECT_NAME}:latest ${DOCKER_CREDENTIAL_USR}/${PROJECT_NAME}:${TAG_VERSION}"
                sh "docker push ${DOCKER_CREDENTIAL_USR}/${PROJECT_NAME}:${TAG_VERSION}"
                sh "docker push ${DOCKER_CREDENTIAL_USR}/${PROJECT_NAME}:latest"
            }
        }
        stage('도커 허브에 푸쉬한 이미지로 docker-server 에 동작') {
            steps {
                sh "docker -H tcp://docker-server:2375 stop web1"
                sh "docker -H tcp://docker-server:2375 rm web1"
                sh """
                    docker -H tcp://docker-server:2375 run -it -d -p 8080:80 --name web1 \
                    woogi567/static-web:${TAG_VERSION}
                """
            }
        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}
